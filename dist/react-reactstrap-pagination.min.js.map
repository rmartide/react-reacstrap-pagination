{"version":3,"file":"react-reactstrap-pagination.min.js","sources":["../src/PaginationComponent.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport memoize from 'memoize-one';\n\nclass PaginationComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activePage: this.props.defaultActivePage\n    };\n  }\n\n  // Since we want to not have to worry about when this changes and since it won't change much\n  // Memoize will remember the last parameter and only execute when they change\n  getNumberOfPages = memoize(\n    props => {\n      const auxPages = props.totalItems / props.pageSize;\n      let pages = parseInt(auxPages, 10);\n      pages += pages !== auxPages ? 1 : 0;\n      return pages;\n    }\n  );\n\n  paginationItems = () => {\n    if (this.props.defaultActivePage !== this.defaultActivePage) {\n      this.defaultActivePage = this.props.defaultActivePage;\n      this.activePage = this.defaultActivePage;\n    }\n\n    const pages = this.getNumberOfPages(this.props);\n    let items = [];\n    const { activePage } = this;\n    const { firstPageText, previousPageText, nextPageText, lastPageText, hasFirstLastNavigation, hasNextPreviousNavigation } = this.props;\n\n    // Since first and last PaginationNumber depend on activepage there's no reason to have them on the state\n    // So we just make the calculations when we need them\n    const firstPaginationNumber = this.getFirstPaginationNumber(activePage, pages);\n    const lastPaginationNumber = this.getLastPaginationNumber(firstPaginationNumber, pages);\n\n    // Elements first and previous\n    hasFirstLastNavigation && items.push(this.firstOrLastPagItem(firstPageText, 1));\n    hasNextPreviousNavigation && items.push(this.nextOrPreviousPagItem(previousPageText, 1, \"l\"));\n\n    // Page numbers\n    for (let i = firstPaginationNumber; i <= lastPaginationNumber; i++) {\n      items.push(this.numberedPagItem(i, activePage));\n    }\n    // Elements next and last\n    hasNextPreviousNavigation && items.push(this.nextOrPreviousPagItem(nextPageText, pages, \"r\"));\n    hasFirstLastNavigation && items.push(this.firstOrLastPagItem(lastPageText, pages));\n    return items;\n  };\n\n  getFirstPaginationNumber = (activePage, pages) => {\n    const distance = Math.floor(this.props.maxPaginationNumbers / 2);\n    const newFPNumber = activePage - distance;\n    const newLPNumber = activePage + distance;\n    let result = 1;\n    if (newFPNumber <= distance) {\n      result = 1;\n    } else if (newLPNumber <= pages) {\n      result = newFPNumber;\n    } else if (newLPNumber >= pages) {\n      result = pages - this.props.maxPaginationNumbers + 1;\n    }\n    return result;\n  };\n\n  getLastPaginationNumber = (firstPaginationNumber, pages) => {\n    const minNumberPages = Math.min(\n      pages,\n      this.props.maxPaginationNumbers\n    );\n    return firstPaginationNumber + minNumberPages - 1;\n  };\n\n  numberedPagItem = (i, activePage) => {\n    let minWidth = \"43.5px\";\n    if (this.props.size === \"lg\") {\n      minWidth = \"71px\"\n    } else if (this.props.size === \"sm\") {\n      minWidth = \"33px\"\n    }\n    return (\n      <PaginationItem\n        key={i}\n        id={`pagebutton${i}`}\n        active={activePage === i}\n        onClick={this.handleClick}\n      >\n        <PaginationLink style={{ minWidth }}>{i}</PaginationLink>\n      </PaginationItem>\n    );\n  };\n\n  nextOrPreviousPagItem = (name, page, direction) => {\n    return (\n      <PaginationItem\n        key={name}\n        disabled={this.activePage === page}\n        onClick={e => this.handleSelectNextOrPrevious(direction)}\n      >\n        <PaginationLink>{name}</PaginationLink>\n      </PaginationItem>\n    );\n  };\n\n  firstOrLastPagItem = (name, page) => {\n    let event = {\n      currentTarget: {\n        getAttribute: () => `pagebutton${page}`\n      }\n    };\n    return (\n      <PaginationItem\n        key={name}\n        disabled={this.activePage === page}\n        onClick={() => this.handleClick(event)}\n      >\n        <PaginationLink>{name}</PaginationLink>\n      </PaginationItem>\n    );\n  };\n\n  handleClick = event => {\n    const newActivePage = parseInt(\n      event.currentTarget\n        .getAttribute(\"id\")\n        .split(\"pagebutton\")\n        .pop(),\n      10\n    );\n    this.changePaginationState(newActivePage);\n  };\n\n  handleSelectNextOrPrevious = direction => {\n    const { activePage, props } = this;\n    const pages = this.getNumberOfPages(props);\n    if (\n      (direction === \"r\" && activePage === pages) ||\n      (direction === \"l\" && activePage === 1)\n    )\n      return;\n\n    const newActivePage = direction === \"r\" ? activePage + 1 : activePage - 1;\n\n    this.changePaginationState(newActivePage);\n  };\n\n  changePaginationState = (newActivePage) => {\n    this.activePage = newActivePage;\n    this.setState({\n      activePage: newActivePage\n    });\n    this.props.onSelect(newActivePage);\n  }\n\n  render() {\n    return <Pagination size={this.props.size}>{this.paginationItems()}</Pagination>;\n  }\n}\n\nPaginationComponent.propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  maxPaginationNumbers: PropTypes.number,\n  defaultActivePage: PropTypes.number,\n  firstPageText: PropTypes.string,\n  previousPageText: PropTypes.string,\n  nextPageText: PropTypes.string,\n  lastPageText: PropTypes.string,\n  size: PropTypes.string,\n  hasNextPreviousNavigation: PropTypes.bool,\n  hasFirstLastNavigation: PropTypes.bool\n};\n\nPaginationComponent.defaultProps = {\n  maxPaginationNumbers: 5,\n  defaultActivePage: 1,\n  firstPageText: \"First\",\n  previousPageText: \"Previous\",\n  nextPageText: \"Next\",\n  lastPageText: \"Last\",\n  hasNextPreviousNavigation: true,\n  hasFirstLastNavigation: true,\n};\n\nexport default PaginationComponent;"],"names":["PaginationComponent","props","memoize","auxPages","totalItems","pageSize","pages","parseInt","_this","defaultActivePage","activePage","getNumberOfPages","items","firstPageText","previousPageText","nextPageText","lastPageText","hasFirstLastNavigation","hasNextPreviousNavigation","firstPaginationNumber","getFirstPaginationNumber","lastPaginationNumber","getLastPaginationNumber","push","firstOrLastPagItem","nextOrPreviousPagItem","i","numberedPagItem","distance","Math","floor","maxPaginationNumbers","newFPNumber","newLPNumber","result","min","minWidth","size","React","PaginationItem","key","id","active","onClick","handleClick","PaginationLink","style","name","page","direction","disabled","e","handleSelectNextOrPrevious","event","currentTarget","getAttribute","newActivePage","split","pop","changePaginationState","setState","onSelect","state","Pagination","this","paginationItems","PureComponent","propTypes","PropTypes","number","isRequired","func","string","bool","defaultProps"],"mappings":"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"}